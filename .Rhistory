duration = faithful$eruptions
View(duration)
stem(duration)
# ------------
# 匯入套件
library(quantmod)
# ------------
# 讀取資料
Sys.setlocale("LC_ALL", "English")
getSymbols("^RUT", source = "yahoo", from = "2010-01-04", to = "2022-12-12")
data <- RUT
data.rtn <- diff(log(data$RUT.Close))
data <- RUT
data_rtn <- diff(log(data$RUT.Close))
data_rtn <- na.omit(data_rtn)
rtn <- data_rtn * 100
head(data_rtn)
head(rtn)
tail(rtn)
dim(rtn)
chartSeries(data, theme = "white")
chartSeries(rtn, theme = "white")
library(FinTS)
install.packages("FinTS")
library(FinTS)
library(fBasics)
basicStats(rtn)
jarqueberaTest(rtn)
Box.test(rtn, lag = 5, type = "Ljung")
acf(rtn)
pacf(rtn)
# 檢定常態性
jarqueberaTest(rtn)  # 不服從常態
# 檢定自我相關性
Box.test(rtn, lag = 5, type = "Ljung")
# 檢定自我相關性
Box.test(rtn, lag = 1, type = "Ljung")
# 檢定自我相關性
Box.test(rtn, lag = 4, type = "Ljung")
# 檢定自我相關性
Box.test(rtn, type = "Ljung")
Box.test(rtn^2, type = "Ljung")
ArchTest(rtn)
basicStats(rtn)
hist(rtn)
hist(rtn, breaks = "Scott", col = "pink",
main = "Histogram of Daily Russell 2000 Return")
hist(rtn, breaks = "Scott", col = "pink",
main = "Histogram of Daily RUT Return")
# 檢定
ArchTest(rtn)
library(rugarch)
# ------------
# GARCH
garch_n <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "norm")
fit_garch_n <- ugarchfit(spec = garch_n, data = rtn, solver = "hybrid")
fit_garch_n
plot(fit_garch_n, which = "all")
# ------------
# GARCH
garch_n <- ugarchspec(mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "norm")
fit_garch_n <- ugarchfit(spec = garch_n, data = rtn, solver = "hybrid")
fit_garch_n
plot(fit_garch_n, which = "all")
# ------------
# GARCH
garch_n <- ugarchspec(mean.model = list(armaOrder = c(0, 1), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "norm")
fit_garch_n <- ugarchfit(spec = garch_n, data = rtn, solver = "hybrid")
fit_garch_n
# ------------
# GARCH
garch_n <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "norm")
fit_garch_n <- ugarchfit(spec = garch_n, data = rtn, solver = "hybrid")
fit_garch_n
# ------------
# GARCH
garch_n <- ugarchspec(mean.model = list(armaOrder = c(1, 1), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "norm")
fit_garch_n <- ugarchfit(spec = garch_n, data = rtn, solver = "hybrid")
fit_garch_n
# ------------
# GARCH
garch_n <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "norm")
fit_garch_n <- ugarchfit(spec = garch_n, data = rtn, solver = "hybrid")
# ------------
# GARCH
garch_n <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "norm")
fit_garch_n <- ugarchfit(spec = garch_n, data = rtn, solver = "hybrid")
fit_garch_n
garch_t <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "std")
fit_garch_t <- ugarchfit(spec = garch_t, data = rtn, solver = "hybrid")
fit_garch_t
garch_skt <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
distribution.model = "sstd")
fit_garch_skt <- ugarchfit(spec = garch_skt, data = rtn, solver = "hybrid")
fit_garch_skt
# ------------
# I-GARCH
igarch_n <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "iGARCH", garchOrder = c(1, 1)),
distribution.model = "norm")
fit_igarch_n <- ugarchfit(spec = igarch_n, data = rtn, solver = "hybrid")
fit_igarch_n
igarch_t <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "iGARCH", garchOrder = c(1, 1)),
distribution.model = "std")
fit_igarch_t <- ugarchfit(spec = igarch_t, data = rtn, solver = "hybrid")
fit_igarch_t
igarch_skt <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "iGARCH", garchOrder = c(1, 1)),
distribution.model = "sstd")
fit_igarch_skt <- ugarchfit(spec = igarch_skt, data = rtn, solver = "hybrid")
fit_igarch_skt
# ------------
# GJR-GARCH
gjrgarch_n <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "gjrGARCH", garchOrder = c(1, 1)),
distribution.model = "norm")
fit_gjrgarch_n <- ugarchfit(spec = gjrgarch_n, data = rtn, solver = "hybrid")
fit_gjrgarch_n
gjrgarch_t <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "gjrGARCH", garchOrder = c(1, 1)),
distribution.model = "std")
fit_gjrgarch_t <- ugarchfit(spec = gjrgarch_t, data = rtn, solver = "hybrid")
fit_gjrgarch_t
gjrgarch_skt <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "gjrGARCH", garchOrder = c(1, 1)),
distribution.model = "sstd")
fit_gjrgarch_skt <- ugarchfit(spec = gjrgarch_skt, data = rtn, solver = "hybrid")
fit_gjrgarch_skt
# ------------
# E-GARCH
egarch_n <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
distribution.model = "norm")
fit_egarch_n <- ugarchfit(spec = egarch_n, data = rtn, solver = "hybrid")
fit_egarch_n
egarch_t <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
distribution.model = "std")
fit_egarch_t <- ugarchfit(spec = egarch_t, data = rtn, solver = "hybrid")
fit_egarch_t
egarch_skt <- ugarchspec(mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
variance.model = list(model = "eGARCH", garchOrder = c(1, 1)),
distribution.model = "sstd")
fit_egarch_skt <- ugarchfit(spec = egarch_skt, data = rtn, solver = "hybrid")
fit_egarch_skt
basicStats(rtn)
hist(rtn, breaks = "Scott", col = "pink",
main = "Histogram of Daily RUT Return")
par(mfrow=c(2,2))
acf(rtn)
pacf(rtn)
acf(rtn^2)
pacf(rtn^2)
# ------------
# 匯入套件
library(fBasics)
library(FinTS)
library(rugarch)
library(quantmod)
# ------------
# 讀取資料
Sys.setlocale("LC_ALL", "English")
# ------------
# 讀取資料
Sys.setlocale("LC_ALL", "English")
getSymbols("^RUT", source = "yahoo", from = "2010-01-04", to = "2022-12-12")
data <- RUT
data_rtn <- diff(log(data$RUT.Close))
data_rtn <- na.omit(data_rtn)
rtn <- data_rtn * 100
rtn
rtn[c(1:-1000)]
rtn[c(:-1000)]
rtn[c(-1000)]
View(rtn)
rtn[1000]
rtn[2257]
library(TSA)
install.packages("TSA")
# Exhibit 1.1
library(TSA)
win.graph(width = 5, height = 2.5, pointsize = 8)
data("larain")
plot(larain, ylab = "Inches", xlab = "Year", type = "o")
win.graph(width = 5, height = 2.5, pointsize = 8)
win.graph(width = 5, height = 2.5, pointsize = 8)
data("larain"); plot(larain, ylab = "Inches", xlab = "Year", type = "o")
# win.graph(width = 5, height = 2.5, pointsize = 8)
data("larain"); plot(larain, ylab = "Inches", xlab = "Year", type = "o")
# win.graph(width = 5, height = 2.5, pointsize = 8)
data("larain")
plot(larain, ylab = "Inches", xlab = "Year", type = "o")
### Exhibit 1.2
plot(y = larain, x = zlag(larain), ylab = "Inches", xlab = "Previous Year Inches")
### Exhibit 1.3
data("color")
plot(color, ylab = "Color Property", xlab = "Batch", type = "o")
### Exhibit 1.4
plot(y = color, x = zlag(color),
ylab = "Color Property", xlab = "Previous Batch Color Property")
corr(color, zlag(color))
cor(color, zlag(color))
x = zlag(color)
y = color
y = as.integer(color)
x[1] <- 0
y <- as.integer(color)
cor(x, y)
### Exercise 1.3: simulate normal vlaue
xyplot(as.ts(rnorm(48)))
### Exercise 1.3: simulate normal vlaue
plot(as.ts(rnorm(48)))
### Exercise 1.3: simulate normal vlaue
plot(as.ts(rnorm(48)), type = "o")
### Exercise 1.3: simulate normal vlaue
plot(as.ts(rnorm(48)), type = "o",
xlab = "Time Period", ylab = "Simulated Value",
title = "normal distribution")
?plot()
### Exercise 1.3: simulate normal vlaue
plot(as.ts(rnorm(48)), type = "o",
xlab = "Time Period", ylab = "Simulated Value",
main = "normal distribution")
plot(as.ts(rnorm(48)), type = "o",
xlab = "Time Period", ylab = "Simulated Value",
main = "normal distribution")
### Exercise 1.3: simulate normal vlaue
plot(as.ts(rchisq(48, 2)), type = "o")
### Exercise 1.3: simulate normal vlaue
plot(as.ts(rchisq(48, 2)), type = "o",
xlab = "Time Period", ylab = "Simulated Value",
main = "Chi-Squared distribution")
plot(as.ts(rchisq(48, 2)), type = "o",
xlab = "Time Period", ylab = "Simulated Value",
main = "Chi-Squared distribution")
### Exercise 1.5: simulate t vlaue
plot(as.ts(rt(48, 5)), type = "o",
xlab = "Time Period", ylab = "Simulated Value",
main = "t distribution")
plot(as.ts(rt(48, 5)), type = "o",
xlab = "Time Period", ylab = "Simulated Value",
main = "t distribution")
### Exhibit 2.1
library(TSA)
data("rwalk")
plot(rwalk, type = "o", ylab = "Random Walk")
library(lattice)
tstest <- ts(runif(100))
lattice::xyplot(tstest,
panel = function(x, y, ...) {
panel.abline(h = mean(y), lty = 2)
panel.xyplot(x, y, ...)
})
bday <- function(n){bday = 1; nm1 = n - 1
for (j in 1:nm1){bday = bday * ((365-j)/365)}
bday <- 1 - bday; return(bday)
}
bday <- function(n){bday = 1; nm1 = n - 1
for (j in 1:nm1){bday = bday * ((365-j)/365)}
bday <- 1 - bday; return(bday)
}
bday(10)
source("D:/Learning/Mathematical-Statistics-Hogg/birthday_problem.R", echo=TRUE)
library(TSA)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
setwd("E:/大四/大四下/FCU-FEAS3022")
library(mlbench)
data("PimaIndiansDiabetes")
library(mlbench)
data("PimaIndiansDiabetes")
dim(PimaIndiansDiabetes)
View(PimaIndiansDiabetes)
levels(PimaIndiansDiabetes)
levels(PimaIndiansDiabetes$diabetes)
head(PimaIndiansDiabetes)
?write.csv()
# 匯出資料
write.csv(PimaIndiansDiabetes, "data.csv")
